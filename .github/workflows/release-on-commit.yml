name: Release on Commit

on:
  push:
    branches:
      - master

jobs:
  check-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      is_release: ${{ steps.extract.outputs.version != '' }}
      version: ${{ steps.extract.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Extract version from commit message
        id: extract
        run: |
          msg=$(git log -1 --pretty=%B)
          echo "Commit message: $msg"

          if [[ $msg =~ release:\ (v[0-9]+\.[0-9]+\.[0-9]+) ]]; then
            echo "version=${BASH_REMATCH[1]}" >> $GITHUB_OUTPUT
            echo "✅ Found version: ${BASH_REMATCH[1]}"
          elif [[ $msg =~ release: ]]; then
            echo "❌ Invalid release commit format. Use: release: vX.Y.Z"
            exit 1
          else
            echo "ℹ️ No release commit. Skipping."
          fi

      - name: Create and push tag
        if: steps.extract.outputs.version != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.extract.outputs.version }}
          git push origin ${{ steps.extract.outputs.version }}

  build-release:
    needs: check-release
    if: needs.check-release.outputs.is_release == 'true'
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'ubuntu-22.04'
            args: ''
          - platform: 'windows-latest'
            args: ''

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'pnpm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-22.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf libasound2-dev

      - name: Install frontend dependencies
        run: pnpm install

      - name: Generate changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v3
        with:
          configuration: ".github/changelog-config.json"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ needs.check-release.outputs.version }}
          releaseName: "Tauri App Boilerplate ${{ needs.check-release.outputs.version }}"
          releaseBody: |
            ## Changelog
            ${{ steps.changelog.outputs.changelog }}

            ## Downloads

            Choose the installer for your operating system:

            **macOS:**
            - Apple Silicon (M1/M2/M3/M4): `Tauri-App-Boilerplate_*_aarch64.dmg`
            - Intel Macs: `Tauri-App-Boilerplate_*_x86_64.dmg`

            **Windows:**
            - Installer: `Tauri-App-Boilerplate_*_x64_en-US.msi`
            - Portable: `Tauri-App-Boilerplate_*_x64-setup.exe`

            **Linux:**
            - Debian/Ubuntu: `tauri-app-boilerplate_*_amd64.deb`
            - Portable: `tauri-app-boilerplate_*_amd64.AppImage`
            - RPM: `tauri-app-boilerplate_*_amd64.rpm`

            Just download, run the installer, and you're ready to go!
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}
